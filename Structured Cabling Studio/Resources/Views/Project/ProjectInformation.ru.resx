<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Author of project" xml:space="preserve">
    <value>Автор проекта</value>
  </data>
  <data name="Eight paragraph &amp; link to the SCS-Calc 2.0 repo" xml:space="preserve">
    <value>Релиз приложения SCS-Calc 2.0 состоялся в феврале 2023-го. По совместительству, приложение стало предметом курсовой работы по платформе .NET в Компьтерной Академии ШАГ г. Кривой Рог.&lt;br /&gt;
Более подбробно ознакомиться с приложением можно на GitHub</value>
  </data>
  <data name="Fifth paragraph - link to the SCS-Calc 1.1 repo" xml:space="preserve">
    <value>Код приложения SCS-Calc 1.1 доступен на GitHub</value>
  </data>
  <data name="First paragraph" xml:space="preserve">
    <value>В августе 2021-го, во время написания курсовой работы по предмету "Структурированные кабельные системы" в Компьтерной Академии ШАГ г. Кривой Рог, возникла необходимость в созднии программного обеспечения для расчета необходимого для построения СКС метража кабеля. Была написана первая версия приложения - консольное приложение на языке C++, которое получило название SCS-Calc.</value>
  </data>
  <data name="First&amp;second image description" xml:space="preserve">
    <value>Первая, консольная версия приложения SCS-Calc</value>
  </data>
  <data name="Fourth paragraph" xml:space="preserve">
    <value>Проект развивался. В августе 2022-го была начата работа над версией 1.1. Одним из основных направлений разработки было создание меню дополнительных параметров, где пользователь мог настроить параметры расчета.&lt;br/&gt;
При работе над версией 1.1 началась работа над новой архитектурной концепцией проекта. Для возможности переноса приложения на другие платформы разработки, была начата работа над созданием независимой от типа приложения кросплатформенной библиотеки, содержащей модель логики работы приложения. Это сыграло значительную роль в следующих версиях проекта, позволив перенести логическое ядро приложения на другие платформы.</value>
  </data>
  <data name="Fourth&amp;fifth image description" xml:space="preserve">
    <value>SCS-Calc 1.1</value>
  </data>
  <data name="History of project" xml:space="preserve">
    <value>История проекта</value>
  </data>
  <data name="Img." xml:space="preserve">
    <value>Рис.</value>
  </data>
  <data name="Ninth paragraph" xml:space="preserve">
    <value />
  </data>
  <data name="Profile" xml:space="preserve">
    <value>Профиль</value>
  </data>
  <data name="Second paragraph" xml:space="preserve">
    <value>Однако, уже тогда было понимание того, что необходимо, в первую очередь, приложение с графическим интерфейсом пользователя.&lt;br/&gt;
Что и было сделано в июне 2022-го - на языке C#, на платформе .NET 6 Windows Forms, была написана первая версия приложения с графическим интерфейсом пользователя. Приложение получило релизный индекс 1.0.</value>
  </data>
  <data name="Seventh paragraph" xml:space="preserve">
    <value>Приложение SCS-Calc 2.0 стало совершенно новым, современным и функциональным приложением. Приложение было написано на более современной платформе разработки - .NET 7 WPF. В значительной степени был доработан функционал приложения, была добавлена возможность получения рекомендаций по побдору кабеля. Переход на новую платформу позволил реализовать совершенно новый, революционный дизайн.</value>
  </data>
  <data name="Sixth image description" xml:space="preserve">
    <value>SCS-Calc 2.0</value>
  </data>
  <data name="Sixth paragraph" xml:space="preserve">
    <value>Но версия 1.1 так и не была опубликована - работа над версией 1.1 плавно перетекла в работу над версией 2.0.&lt;br /&gt;
</value>
  </data>
  <data name="Third image description" xml:space="preserve">
    <value>Приложение SCS-Calc - десктопная версия</value>
  </data>
  <data name="Third paragraph - link to the SCS-Calc repo" xml:space="preserve">
    <value>Более подробно ознакомиться с приложением SCS-Calc можно на GitHub</value>
  </data>
</root>